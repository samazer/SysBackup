<?php /* -*- mode: php; mode: mmm; coding: utf-8-unix; -*- */
/**
 *
 * mysql Plugin
 *
 *
 * <p><b>Copyright</b>
 *
 * <p>Copyright (c) 2011 by Sam Azer, All Rights Reserved.
 *
 * <p>This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 * @author Sam Azer <sam@azertech.net>
 * @version 0.01 (alpha)
 * @package server-maint
 * @subpackage sysbackup
 * @license http://www.gnu.org/licenses/agpl.html AGPL
 * @copyright 2011 by Sam Azer, All rights reserved
 * @link http://www.azertech.net/
 * @link http://www.samazer.net/about
 *
 */


//require_once "lib/general-plugins.inc";


class mysql_plugin_c extends plugin_base_c
{
   var $job_info;


   function __construct( &$application_object )
   {
      parent::__construct( $application_object );

      $this->plugin_name        = "mysql";
      $this->plugin_title       = "MySQL Database";
      $this->plugin_version     = "0.01a";
      $this->plugin_description = "This plugin produces backups of a MySQL server (local or remote)";

      $this->plugin_enabled     = true;
      $this->plugin_rootreqd    = false;  // true if root permissions required

      $this->plugin_type        = "genbackup";
      $this->plugin_unique      = false;

      $this->job_info = array();
   }


   /**
    *
    * Plugin Help
    *
    * Emit a help message for the plugin
    *
    */
   function plugin_help()  
   {
      $this->app->tee( "(help for this plugin is not available yet)" );
   }


   /**
    *
    * Required Options
    *
    * Programmers helper: returns an array of 
    *        Option => array( Required_flag, Help Text ), ...
    *
    */
   function required_options()
   {
      return array( "userid"        => array( true,  "the userid to use for backup operations"),
                    "password"      => array( true,  "the password associated with the specified user id" ),
                    "hostname"      => array( true,  "the mysql server hostname" ),
                    "port"          => array( true,  "the port number to use on the host" ),
                    "mysql_bin"     => array( false, "the mysql command line utility binary" ),
                    "mysql_opt"     => array( false, "options to pass to the mysql command" ),
                    "mysqldump_bin" => array( false, "the mysql dump utility binary" ),
                    "mysqldump_opt" => array( false, "options to pass to the mysqldump command" ),
                    "lockdb"        => array( true,  "true to use the lockdbopt options in the mysqldump command" ),
                    "lockdbopt"     => array( true,  "option to pass to mysqldump to lock the database during the dump operation" ),
                    );
   }


   /**
    *
    * Plugin Load
    *
    * This method is called for ALL PLUGINS just before the
    * app_after_init() method is called (ie: almost at the end of the
    * init process.)
    *
    */
   function load()
   {
      // nothing to do in this case
   }


   /**
    *
    * Plugin Unload
    *
    * This method is called for ALL PLUGINS just after the
    * app_after_events() method is called (ie: almost at the end of
    * app execution.)
    *
    */
   function unload()
   {
      // nothing to do in this case
   }


   function get_database_list( $configuration )
   {
      $this->job_info = $configuration;

      $problems_found = false;
      $required_options = $this->required_options();
      foreach ( $required_options as $opt => $info )
         $$opt = $this->job_info[$opt];

      // no hostname
      if ( $hostname == "" )
      {
         if ( $this->app->verbose )
            $this->app->warning( "job skipped due to blank mysql hostname" );

         return false;
      }

      // get a list of databases to backup
      $cmd = $mysql_bin
           . " --user="     . $userid
           . " --password=" . $password
           . " --host="     . $hostname
           . " --port="     . $port
           . " -e 'show databases;' "
           ;

      // get the list
      if ( ($r = sysexec( $out, $cmd )) )
         $this->warning( "unable to exec mysql command {$cmd}" );


      // handle funny exit codes from the proc_open() library
      if ( ( ($out["proc_close"] == -1) && ($out["exitcode"] ==  0) )
        || ( ($out["proc_close"] ==  0) && ($out["exitcode"] == -1) )
        || ( ($out["stderr"]     == "") && ($out["exitcode"] == -1) )
         )
      {
         // remove the heading
         $database_list = substr( $out["stdout"], strpos( $out["stdout"], "\n" ));

         // convert to an array
         $database_list = explode( "\n", trim($database_list) );

         sort($database_list); // for convenience when reading reports

         return $database_list;
      }

      // an error was detected
      $this->app->warning( "unable to get database list from {$userid}@{$hostname}:{$port}" );
      $this->app->fatal( "{$mysql_bin} reports: " . trim($out['stderr']) );

   }



   /**
    *
    * Job Prepare
    *
    * This method is called for EACH JOB just after the
    * app_before_events() method is called (ie: just before any events
    * are triggered, before any jobs start. This is a good time to
    * emit any error messages that might be generated during job
    * execution.)
    *
    */
   function job_prepare( $configuration )
   {
      $this->get_database_list( $configuration );
   }


   /**
    *
    * Job Cleanup
    *
    * This method is called for EACH JOB after all the jobs have been
    * exec'd and before the app_after_events() method is called. This
    * is a good time to perform any cleanup operations that might be
    * needed before the plugin is unloaded.
    *
    */
   function job_cleanup( $configuration )
   {
      // nothing to do in this case
   }


   /**
    *
    * Job Exec
    *
    * This method is called for EACH JOB during the event to which the
    * job was assigned. Jobs are sorted by Job Index string and
    * executed in sorted order.
    *
    */
   function job_exec( $configuration )
   {
      $this->job_info = $configuration;

      $problems_found = false;
      $required_options = $this->required_options();
      foreach ( $required_options as $opt => $info )
         $$opt = $this->job_info[$opt];

      // no hostname
      if ( $hostname == "" )
         return false;

      $database_list = $this->get_database_list( $configuration );


      if ( isset($this->job_info["subfolder"]) )
         if ( $this->app->vfs_subfolder( $this->job_info["subfolder"] ) != false )
            $this->app->fatal( "unable to select {$this->job_info['subfolder']} subfolder" );
          

      $problems_detected = false;
      foreach ( $database_list as $dbname )
      {
         // dump each database
         $cmd = $mysqldump_bin
              . " --user="     . $userid
              . " --password=" . $password
              . " --host="     . $hostname
              . " --port="     . $port
              . ($lockdb ? $lockdbopt : "")
              . " {$dbname}"

                // get rid of the time stamp in the dump as it changes the file hash
              . " | grep -v '^\-\- Dump completed on ....-..-.. ..:..:..$'" 

              ;

         $problem_detected = false;
         $db_fn = "{$hostname}/{$dbname}.sql" . $this->app->tar->compressor_ext();
         $this->app->vfs_compress_command( $cmd, $db_fn );
      }

      if ( $problems_detected )
         $this->app->warning( "MySQL backup errors detected" );

      // problems? perhaps, but keep going.
      return $problems_detected;
   }
}


$this->add_plugin( new mysql_plugin_c( $this ) );


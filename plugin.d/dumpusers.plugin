<?php /* -*- mode: php; mode: mmm; coding: utf-8-unix; -*- */
/**
 *
 * dump users plugin
 *
 * Utility that can be helpful when migrating accounts from one server
 * to the next. Emits a shell script that, when executed on the target
 * system, creates the user accounts that existed on the backed-up
 * system.
 *
 *
 * <p><b>Copyright</b>
 *
 * <p>Copyright (c) 2011 by Sam Azer, All Rights Reserved.
 *
 * <p>This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 * @author Sam Azer <sam@azertech.net>
 * @version 0.01 (alpha)
 * @package sysbackup
 * @subpackage plugin
 * @license http://www.gnu.org/licenses/agpl.html AGPL
 * @copyright 2011 by Sam Azer, All rights reserved
 * @link http://www.azertech.net/
 * @link http://www.samazer.net/about
 *
 */


require_once "lib/sys-account-migration.inc";


/**
 *
 * @package sysbackup
 * @subpackage plugin
 *
 */
class dumpusers_plugin_c extends sysbackup_plugin_base_c
{
   function __construct( &$application_object )
   {
      parent::__construct( $application_object );

      $this->plugin_name        = "dumpusers";
      $this->plugin_title       = "Dump Users";
      $this->plugin_version     = "0.01a";
      $this->plugin_description = "This plugin produces a script that can re-create the user accounts found on the backed-up system";

      $this->plugin_enabled     = true;
      $this->plugin_rootreqd    = true;  // true if root permissions required

      $this->plugin_type        = "genbackup";
      $this->plugin_unique      = false;
   }


   /**
    *
    * Plugin Help
    *
    * Emit a help message for the plugin
    *
    */
   function plugin_help()  
   {
      $this->tee( "(help for this plugin is not available yet)" );
   }


   /**
    *
    * Required Options
    *
    * Programmers helper: returns an array of 
    *        Option => array( Required_flag, Help Text ), ...
    *
    */
   function required_options()
   {
      return array();
   }


   /**
    *
    * Plugin Load
    *
    * This method is called for ALL PLUGINS just before the
    * app_after_init() method is called (ie: almost at the end of the
    * init process.)
    *
    */
   function load()
   {
      // nothing to do in this case
   }


   /**
    *
    * Plugin Unload
    *
    * This method is called for ALL PLUGINS just after the
    * app_after_events() method is called (ie: almost at the end of
    * app execution.)
    *
    */
   function unload()
   {
      // nothing to do in this case
   }


   /**
    *
    * Job Prepare
    *
    * This method is called for EACH JOB just after the
    * app_before_events() method is called (ie: just before any events
    * are triggered, before any jobs start. This is a good time to
    * emit any error messages that might be generated during job
    * execution.)
    *
    */
   function job_prepare( $configuration )
   {
      // nothing to do in this case
   }


   /**
    *
    * Job Cleanup
    *
    * This method is called for EACH JOB after all the jobs have been
    * exec'd and before the app_after_events() method is called. This
    * is a good time to perform any cleanup operations that might be
    * needed before the plugin is unloaded.
    *
    */
   function job_cleanup( $configuration )
   {
      // nothing to do in this case
   }


   /**
    *
    * Job Exec
    *
    * This method is called for EACH JOB during the event to which the
    * job was assigned. Jobs are sorted by Job Index string and
    * executed in sorted order.
    *
    */
   function job_exec( $configuration )
   {
      // let the parent method take care of common operations
      if ( ($r = parent::job_exec( $configuration )) !== false )
         return $r;

      $hostname = $this->app->get_hostname();
      $stamp    = date("r");
      $r        = <<< EOT
#!/bin/sh
# 
# recreate users .sh
#
# This script is based on the password and group files in the /etc/ folder of 
# {$hostname} as at {$stamp}. 
# The account create and modify commands below, when executed on a new server, 
# will effectively recreate (almost) identical account information.
#
# Copies of the original password, group and shadow files should be found in 
# the etc.tgz tarball which should be created along with this script. This 
# script should be reviewed for accuracy. If all goes well this script should 
# be able to recreate all the users and groups from the original server on the 
# new server (not including the system users and groups which are most often 
# not needed.) 
#
# Warning
#
# This script does not take into consideration some rarely used bits and pieces 
# of information that are legal in the various password, group and shadow files. 
# Review this script carefully and, if necessary, take the time to either modify 
# the script or manually manage the password and group information that is not 
# currently handled by the script.
#
#
EOT;

      $accounts = new account_migration_c( "/etc/" );

      capture_begin();
      $accounts->migration_commands();
      $r .= capture_end();

      $sh_fn = "recreate_users.sh" . $this->compressed_file_ext();
      $this->vfs_compress_string( $sh_fn, $r );
   }
}


$this->add_plugin( new dumpusers_plugin_c( $this ) );


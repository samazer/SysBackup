[Generated from doc/BE-PREPARED.html]


                                  BE PREPARED!

     Note: The most up-to-date copy of this file is available in the
     [1]SysBackup Documentation and FAQ pages on the [2]AzerTech.net web
     site.

   [main-use-case.png]

                          [multi-function-tool.jpg]

                                                       [3]Docs & FAQ Pages
                                                     [4]Download SysBackup
                                               [5]SysBackup on SourceForge
                                                    [6]SysBackup on GitHub
                                                     [7]SysBackup on Ohloh
                                              [8]Installation Instructions
                                                           [9]Be Prepared!

   It's always a good idea to make some kind of backup - having copies of
   data is better than not having copies - but any experienced system
   administrator will tell you that backups are not, by themselves, very
   useful. Blindly running a backup utility is not the same as being
   prepared for the day-to-day issues that your organization will face
   over a period of years.

   The goal of any serious backup process is to be prepared. An
   experienced system administrator wants to make sure that any piece of
   equipment (server or workstation) is setup so that users will be able
   to get what they need, when they need it, for different types of
   restore operations. This often means being able to go back in time and:
     * find copies of files that users have accidentally changed or
       deleted (sometimes undetected for days, weeks or months,)
     * help users recover from long-term data value degradation caused by
       malware and software bugs,
     * restore a service or services that have been damaged by software
       upgrades,
     * migrate a server to a new host,
     * comply with regulations concerning long-term storage of data,
     * respond to regulatory agency requests for otherwise expired
       information,
     * and generally help when dealing with unexpected problems.

   Therefore it is critically important that you take the time and make
   the effort to follow a business process to ensure that you are properly
   responding to your mandate as a system administrator.

How?

   [image014.png] The solution is time-consuming to execute but,
   fortunately, it's easy to understand:
    1. Start by implementing a business process - a set of realistic steps
       that you will be able to schedule and complete - that result in a
       workable Disaster Recovery Plan.
    2. Test the plan to verify that following that plan will give you the
       results that you need.
    3. Put the plan into action and, from time to time, evaluate the
       results and review the plan again. Your world will be changing over
       time and you will need to keep adjusting the plan to keep up.

   It's a simple cycle; all you need to do is go through it from time to
   time. Here are some steps that you can take to get started:
    1. Make a list of all the services that are being used on your server.
       This sounds simple enough - and it should be in many cases - but it
       can get complicated. It can get really complicated in cases where
       you are working with a legacy system that has been running for many
       years.
       In difficult cases you can get some help by polling your user
       community and carefully reviewing your logs from time to time. In
       fact this may be the only way that you can be sure that your
       backups and test procedures actually cover all the functionality
       that your users are using.
    2. Make a list of all the different types of data requests that you
       might get from your user community and any applicable regulatory
       agencies. For example:

     Most governments require accounting data to be available for some
     years after the filing of tax returns. Accounting data is worthless
     if you don't have the software required to read the data and produce
     any required reports. Therefore, to honor your mandate as system
     administrator you must include in your backup procedure:
         1. Backups of the accounting system data. You will need, at the
            very least, a copy of the data as it stands after the
            accounting department has closed out each year.
         2. Backups of the version of the accounting software that is able
            to read and report on the data.
         3. Backups of the operating system software that is compatible
            with the accounting software.

     To succeed it is necessary to ensure that all of the above steps are
     taken each year. This is separate from steps that the accounting
     department might take (such as converting the data from past years
     so that it is compatible with the current versions of the accounting
     software on current systems.) Remember that the efforts of the
     accounting staff might appear to succeed but might, in fact, not
     succeed. The accountants would then be forced to call the system
     administrators - often years later - for help when they get stuck.
    3. Based on the results of your research in steps 1 and 2 above:
       design a restore procedure for your server. Once you have a
       detailed plan for restoring your server after a disaster it should
       be possible to prepare the corresponding backup plan.
    4. Design a complete set of test plans for your server. Make sure you
       include tests covering:
         1. your ability to get all the services working again after a
            major disaster
         2. your ability to properly respond to all the requests that you
            might get for data from the server.
       Remember to go back to your restore plan and update it if, during
       the design and documentation of your test plans, you discover a
       problem with the restore or the backup procedures.
       At this point the documentation you have produced is effectively
       your Disaster Recovery Plan. It's very nice that you have a plan -
       but you need to know if it's going to work and, if it's not going
       to work, you need to fix it.
    5. Execute the backup procedure that you designed in step#3 above.
    6. Pretend that the entire server was lost. Build a new server
       (usually a virtual server running on an isolated test network,) and
       execute your restore procedure.
    7. Finally: execute the test plans against the restored server. Verify
       that you are able to restore all services and respond to all
       possible data requests using only an Operating System installation
       CD and your last backupset and your backup rotations.

   Evaluate your results and, if anything is not entirely perfect, update
   your restore and backup procedures (and your test plans whenever
   necessary.)

   It is important to keep repeating the above process until you are
   certain that you have successfully completed a backup-restore-test
   cycle without incident. This is the only way to be sure that the
   disaster recovery plan is valid.

   Note that once everything is working perfectly you will get at least
   one good backup. After that the user community will start finding new
   ways to use the services so that, over time, the value of the backups
   you are generating will go down. At some point things will have changed
   so much that the backups will seem useless! To avoid any problems it is
   necessary to execute the above procedure every few months or whenever
   major changes are made to the server.

   Of course disaster planning and recovery has different meanings in
   different contexts. As a system administrator you might want to add
   your hardware maintenance schedule and other issues to the
   documentation that you are building. Having a more complete document,
   covering more of the issues that you face as a system administrator,
   allows you to ensure a higher degree of long-term excellence in
   everything you do.

Day-to-day Issues

   Most day-to-day file recovery issues can be managed by keeping a
   fine-grained set of user and daemon backups in a lengthy rotation.
     * Keep daily backups for a number of days (according to your needs,)
     * weekly backups for a number of weeks
     * and monthly backups for a number of months.

   If the backups are granular enough you will be able to pull the
   information that your user community requests from time to time without
   too much trouble.

  Rotations, Granularity, Disk space & User Satisfaction

   To save disk space many system administrators try to use incrementatl
   backups. In practice the incremental technique might save some disk
   space but it adds cost and complexity to many types of restore
   operations.

   SysBackup tries to avoid these issues through the use of hardlinks
   between identical files. Hardlinks can save a great deal of disk space
   in cases where the contents of a folder are rarely modified. The
   savings can be especially great in cases where there are a large number
   of backupset rotations being stored over long periods of time.

   On the other hand hardlinks are largely useless in cases where the
   backupsets are not granular.

   Another problem with backupsets that contain lots of huge tarballs (ie:
   are not granular) is that they tend to be expensive to work with. This
   is not only because it takes so long to find small files in larger
   tarballs - it's also because larger tarballs tend to contain files
   belonging to more than one user, service or daemon. They can be
   difficult to distribute to users in response to help requests because
   they might violate some privacy or other restriction. Therefore, when
   tarballs are not granular enough, an administrator might fail to find
   the requested files or might even just outright refuse to look for
   them.

   Granular backupsets do not have these problems. Not only is it easier
   to hardlink more tarballs between backupsets but the smaller tarballs
   tend to be much easier to distribute to users. This is because they
   tend to contain only files associated with a given user or service - so
   they often have few, if any, privacy or other restrictions associated
   with them. The person who owns the data within them can almost always
   just ask for a copy without causing any difficulty for the
   administrator who must approve the request. In these cases there is one
   other added bonus: The administrator need not look for any files within
   the tarball. It is easier to just give the entire tarball to the user
   and let the user do the looking! This can save a huge amount of time
   while giving the user community a great deal of confidence in their
   I.T. infrastructure.
     __________________________________________________________________


                             [10][agpl-v3-logo.svg]   [11][gfdl-logo.svg]


    Copyright © 2011 by [12]Sam Azer<[13]sam@azertech.net>, All rights
    reserved.

   Last modified: Thu Dec 15 00:46:21 EST 2011

References

   1. http://www.azertech.net/content/category/3/49/29/
   2. http://www.azertech.net/
   3. http://www.azertech.net/content/category/3/49/29/
   4. http://azer.ca/sysbackup-sfd
   5. http://azer.ca/sysbackup-sf
   6. http://azer.ca/sysbackup-gh
   7. http://azer.ca/sysbackup-oh
   8. file://localhost/projects/server-scripts/backupv3/doc/INSTALL.html
   9. file://localhost/projects/server-scripts/backupv3/doc/BE-PREPARED.html
  10. http://www.gnu.org/licenses/agpl.html
  11. http://www.gnu.org/copyleft/fdl.html
  12. http://azertech.net/about
  13. mailto:sam@azertech.net?subject=SysBackup
